////////////////////////////////////////////////////////////////////////////////
//
// PLUGIN_VERSION is the common version name when describing the plugin.
// ATAK_VERSION   is for the version of ATAK this plugin should be compatible
//                with some examples include 3.11.0, 3.11.0.civ 3.11.1.fvey
//
////////////////////////////////////////////////////////////////////////////////

buildscript {
    ext.PLUGIN_VERSION = "1.0"
    ext.ATAK_VERSION = "4.1.1"

    ext.sdkPath = project.properties['sdk.path'] ?: "${rootDir}/sdk"
    ext.takrepoUrl = project.properties['takrepo.url']
    ext.takrepoUser = project.properties['takrepo.user']
    ext.takrepoPassword = project.properties['takrepo.password']

    ext.atakApkConfiguration = 'AtakApk'
    ext.mappingConfiguration = 'Mapping'
    ext.keystoreConfiguration = 'Keystore'

    ext.mavenOnly = project.properties['maven.only'] ?: false

    ext.pluginVersion = PLUGIN_VERSION
    ext.atakVersion = ATAK_VERSION

    repositories {
        jcenter()
        google()
        mavenCentral()
        maven {
            url "https://jitpack.io"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
    }
}

allprojects {
    repositories {
        jcenter()
        google()
        mavenCentral()
        maven {
            url "https://jitpack.io"
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'gov.tak.atakplugin'

// Attempt to get a suitable version name for the plugin based on
// either a git or svn repository
def getVersionName() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short=8', 'HEAD'
            standardOutput = stdout
        }
        def describe = stdout.toString().trim()
        println("versionName[git]: $describe")
        return describe
    } catch (Exception ignored) {
        println("error occured, using revision of 1")
        return 1
    }
}


// Attempt to get a suitable version code for the plugin based on
// either a git or svn repository
def getVersionCode() {
    try {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = 'git'
                args = ['show', '-s', '--format=%ct']
                standardOutput = os
                ignoreExitValue = true
            }

            def outputAsString = os.toString()
            ext.revision = "$outputAsString".toInteger()

            println("version[git]: $revision")
        }
    } catch (Exception ignored) {
        println("error occured, using revision of 1")
        ext.revision = 1
    }

    return revision
}


android {
    compileSdkVersion 26
    buildToolsVersion "29.0.2"

    dexOptions {
        jumboMode = true
    }

    lintOptions {
        checkReleaseBuilds true
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError true
    }

    signingConfigs {
        release {
            storeFile file("${buildDir}/android_keystore")
            storePassword "tnttnt"
            keyAlias "wintec_mapping"
            keyPassword "tnttnt"
        }
    }

    buildTypes {
        debug {
            debuggable true
            matchingFallbacks = ['sdk']
        }

        release {
            minifyEnabled true
            proguardFile 'proguard-gradle.txt'
            signingConfig signingConfigs.release
            matchingFallbacks = ['odk']
        }
    }

    flavorDimensions "application"

    productFlavors {
        mil {
            getIsDefault().set(true)
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".MIL"]
        }
        civ {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CIV"]
        }
        fvey {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".FVEY"]
        }
        aus {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".AUS"]
            matchingFallbacks = 'fvey'
        }
        nzl {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".NZL"]
            matchingFallbacks = 'fvey'
        }
        prt {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".PRT"]
            matchingFallbacks = 'fvey'
        }
        nor {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".NOR"]
            matchingFallbacks = 'fvey'
        }
        gbr {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".GBR"]
            matchingFallbacks = 'fvey'
        }
        can {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CAN"]
            matchingFallbacks = 'fvey'
        }
        intl {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".INTL"]
            matchingFallbacks = 'fvey'
        }
    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
    }

    sourceSets {
        main {
            setProperty("archivesBaseName", "ATAK-Plugin-" + rootProject.name + "-" + PLUGIN_VERSION + "-" + getVersionName() + "-" + ATAK_VERSION)
            defaultConfig.versionCode = getVersionCode()
            defaultConfig.versionName = PLUGIN_VERSION + " (" + getVersionName() + ") - [" + ATAK_VERSION + "]"
        }
    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
    }

    sourceSets {
        main {
            setProperty("archivesBaseName", "ATAK-Plugin-" + rootProject.name + "-" + PLUGIN_VERSION + "-" + getVersionName() + "-" + ATAK_VERSION)
            defaultConfig.versionCode = getVersionCode()
            defaultConfig.versionName = PLUGIN_VERSION + " (" + getVersionName() + ") - [" + ATAK_VERSION + "]"
        }

        // Move the tests to tests/java, tests/res, etc...
        //instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')

    }

    defaultConfig {
        minSdkVersion 26
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86"
        }
    }

    if (file("$project.projectDir/../espresso/testSetup.gradle").exists()) {
        apply from: '../espresso/testSetup.gradle'
    } else {
        println("espresso test harness not found")
    }
}

// dependencies and configuration have to follow android closure to support build variants
configurations {
    // from https://developer.android.com/studio/build/dependencies#dependency_configurations
    // which indicates we need to define our variant permutations in advance of the dependencies

    android.applicationVariants.all { variant ->
        "${variant.name}${mappingConfiguration}" {}
        "${variant.name}${keystoreConfiguration}" {}
        "${variant.name}${atakApkConfiguration}" {}
    }
}

dependencies {



    implementation fileTree(dir: 'libs', include: '*.jar')
}
